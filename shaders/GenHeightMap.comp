#version 430

layout(std430, binding = 2) buffer PolygonBuffer {
    uint polygon[];
};

layout (r32f, binding = 3) uniform image2D imgOutput;

//TODO: uniform displacement map + height multiplier

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main() {
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    int n = polygon.length();
    bool inside = false;

    for (int i = 0, j = n - 1; i < n; j = i++) {
        Point pi = polygon[i];
        Point pj = polygon[j];

        bool intersect = ((pi.y > coords.y) != (pj.y > coords.y)) &&
        (coords.x < (pj.x - pi.x) * (coords.y - pi.y) / (pj.y - pi.y) + pi.x);
        if (intersect) {
            inside = !inside;
        }
        // xor() + mix() + ballot()
    }

    //TODO: either height or 0
    imgOutput[coords.y * 1024 + coords.x] = inside;
}
