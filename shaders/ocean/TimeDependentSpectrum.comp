#version 450 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Output textures
layout (binding = 4, rg32f) writeonly uniform image2D Dx_Dz;
layout (binding = 5, rg32f) writeonly uniform image2D Dy_Dxz;
layout (binding = 6, rg32f) writeonly uniform image2D Dyx_Dyz;
layout (binding = 7, rg32f) writeonly uniform image2D Dxx_Dzz;

// Input textures
layout (binding = 11, rgba32f) readonly uniform image2D H0;
layout (binding = 12, rgba32f) readonly uniform image2D WavesData;

layout (location = 1) uniform float Time;

vec2 ComplexMult(vec2 a, vec2 b) {
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

void main() {
    uvec2 id = gl_GlobalInvocationID.xy;
    vec4 wave = imageLoad(WavesData, ivec2(id));
    float phase = wave.w * Time;
    vec2 exponent = vec2(cos(phase), sin(phase));

    vec4 h0 = imageLoad(H0, ivec2(id));
    vec2 h = ComplexMult(h0.xy, exponent) + ComplexMult(h0.zw, vec2(exponent.x, -exponent.y));
    vec2 ih = vec2(-h.y, h.x);

    vec2 displacementX = ih * wave.x * wave.y;
    vec2 displacementY = h;
    vec2 displacementZ = ih * wave.z * wave.y;

    vec2 displacementX_dx = -h * wave.x * wave.x * wave.y;
    vec2 displacementY_dx = ih * wave.x;
    vec2 displacementZ_dx = -h * wave.x * wave.z * wave.y;

    vec2 displacementY_dz = ih * wave.z;
    vec2 displacementZ_dz = -h * wave.z * wave.z * wave.y;

    imageStore(Dx_Dz, ivec2(id), vec4(displacementX.x - displacementZ.y, displacementX.y + displacementZ.x, 0.0, 0.0));
    imageStore(Dy_Dxz, ivec2(id), vec4(displacementY.x - displacementZ_dx.y, displacementY.y + displacementZ_dx.x, 0.0, 0.0));
    imageStore(Dyx_Dyz, ivec2(id), vec4(displacementY_dx.x - displacementY_dz.y, displacementY_dx.y + displacementY_dz.x, 0.0, 0.0));
    imageStore(Dxx_Dzz, ivec2(id), vec4(displacementX_dx.x - displacementZ_dz.y, displacementX_dx.y + displacementZ_dz.x, 0.0, 0.0));
}
