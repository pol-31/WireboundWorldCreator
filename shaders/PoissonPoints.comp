#version 460 core

layout(binding = 0, rgba8ui) readonly uniform uimage2D density;
layout(binding = 1, r8ui) readonly uniform uimage2D inputImage;
layout(binding = 2, r8ui) writeonly uniform uimage2D outputImage;

uniform float threshold;
uniform int textureSize;
uniform int areaSize;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);

    float sum = 0;

//    int area_size_dbg = areaSize;
    int area_size_dbg = 5;

    float divider = 0.0f;

    for (int i = -area_size_dbg; i <= area_size_dbg; ++i) {
        for (int j = -area_size_dbg; j <= area_size_dbg; ++j) {
            ivec2 offset = ivec2(i, j);
            vec4 pixelValue = imageLoad(inputImage, texCoord + offset);
            sum += float(pixelValue.r);
            ++divider; // 25?
        }
    }
    // now [0;1]
    sum /= divider;

    float itsOwnPixelValue = imageLoad(inputImage, texCoord).r;
    float itsOwnPixelValue2 = imageLoad(density, texCoord).r;

    // not [0;255]
//    uint out_value = uint(itsOwnPixelValue2);
    // TODO: something wrong with density texture
    // TODO: let's modify class_Texture
    uint out_value = uint(sum * itsOwnPixelValue2 / 255.0f);

//    float weight = 0.75; // TODO: uniform
//    uint out_value = uint(mix(itsOwnPixelValue2, avg, weight) * avg / 256.0f);

    imageStore(outputImage, texCoord, uvec4(out_value, 0, 0, 0));
}

