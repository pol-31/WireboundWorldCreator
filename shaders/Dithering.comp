#version 460 core

// DEPRECATED, not used by now

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba8) readonly uniform image2D inputImage;
layout(binding = 1, r8ui) writeonly uniform uimage2D outputImage;

// Dithering kernel
const int ditheringKernel[16] = int[16](
1, 9, 3, 11,
13, 5, 15, 7,
4, 12, 2, 10,
16, 8, 14, 6
);

void main() {
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec4 pixelValue = imageLoad(inputImage, pixelCoord);

    // Get kernel value based on pixel position
    int kernelIndex = (pixelCoord.x % 4) + (pixelCoord.y % 4) * 4;
    int kernelValue = ditheringKernel[kernelIndex];

    // Normalize kernel value to the range [0, 1]
    float threshold = float(kernelValue) / 16.0;

    // Apply thresholding
    uint outputValue = (pixelValue.r > threshold) ? 1 : 0;

    // TODO: looks like they do "magic" here

//    imageStore(outputImage, pixelCoord, uvec4(1, 0, 0, 0));
    imageStore(outputImage, pixelCoord, uvec4(outputValue, 0, 0, 0));
}
